version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: xiv-voices-admin
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://xivvoices:xivvoices_password@postgres:5432/xivvoices_db?schema=public
      # Use your actual production URL here
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://your-production-domain.com}
    env_file:
      - .env.production
    volumes:
      - node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Add labels for reverse proxy if using one (e.g., Traefik)
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.xivvoices.rule=Host(`your-production-domain.com`)"
    #   - "traefik.http.routers.xivvoices.entrypoints=websecure"
    #   - "traefik.http.routers.xivvoices.tls.certresolver=myresolver"

  postgres:
    image: postgres:14
    container_name: xiv-voices-postgres
    # In production, you might not want to expose the database port
    # ports:
    #   - "5432:5432"
    environment:
      # In production, use more secure passwords from environment variables
      POSTGRES_USER: ${POSTGRES_USER:-xivvoices}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-xivvoices_password}
      POSTGRES_DB: ${POSTGRES_DB:-xivvoices_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-xivvoices}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  node_modules: